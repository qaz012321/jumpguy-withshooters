// edit 1133 is working collision with no camera attempts
// this is my really scuffed scrolling version of the game

1. platform loading maybe
2. sprite loading
3. background scrolling
4. directional bullets
5. deaths
6. levels
7. corner collision

class Main {
  public static void main(String[] args) {
    System.out.println("Hello world!");
    GravityAndJumping demo = new GravityAndJumping();
    demo.run();
  }
}

import java.awt.Graphics;

public class Ammo{
    final int CARTRIDGE_SIZE = 50;    
    private Bullet[] bullets;
    
    Ammo(){
        this.bullets = new Bullet[CARTRIDGE_SIZE];
    }
//------------------------------------------------------------------------------      
    public void drawBullets(Graphics g){
        for (int i=0; i<this.bullets.length; i++){
            if (this.bullets[i] != null){
                this.bullets[i].draw(g);
            }
        }
    }
    public void moveBullets(){
        for (int i=0; i<this.bullets.length; i++){
            if (this.bullets[i] != null){
                this.bullets[i].move();
                if (this.bullets[i].getX() > Const.WIDTH || this.bullets[i].getX() < 0){
                    this.removeBullet(i);
                }
            }
        }
    }
//------------------------------------------------------------------------------  
    public void addBullet(Character player){
        boolean added = false;
        for (int i=0; i<this.bullets.length; i++){
            if (this.bullets[i] == null && !added){
                int bulletX = player.getX();
                int bulletY = player.getY() + player.getH()/2 - Const.BULLET_HEIGHT;
                this.bullets[i] = new Bullet(bulletX, bulletY, player.getDirection());
                added = true;
            }
        }
    }
    public void removeBullet(int index){
        this.bullets[index] = null;
    }    
}

// inherits GameObject
import java.awt.Graphics;
import java.awt.Color;

public class Bullet extends GameObject{
    private int bulletVx;
    
    public Bullet(int x, int y, String dir){
        super(x, y, Const.BULLET_WIDTH, Const.BULLET_HEIGHT);
        if (dir.equals("left")) {
          this.bulletVx = -Const.BULLET_SPEED;
        } else if (dir.equals("right")) {
          this.setX(x+Const.CHARW-Const.BULLET_WIDTH);
          this.bulletVx = Const.BULLET_SPEED;
        }
    }    
//------------------------------------------------------------------------------    
    @Override
    public void draw(Graphics g){
        g.setColor(Color.BLACK);
        g.fillRect(getX(), getY(), getW(), getH());    
    }    
//------------------------------------------------------------------------------    
    public void move(){
        this.setX(this.getX() + this.bulletVx);
    }    
}

// inherits GameObject
import java.awt.Graphics;
import java.awt.Color;
// edit 1133 is working collision with no camera attempts

public class Character extends GameObject {
    private int xVel;
    private int yVel;
    private int moveSpeed;
    private int jumpPower;
    private String direction = "";
    private int internalPos;
    private int internalPosSave;
    private int moveOther;
//------------------------------------------------------------------------------    
    Character(int x, int y, int width, int height, int speed, int jp){
        super(x,y,width,height);
        this.xVel = 0;
        this.yVel = 0; 
        this.moveSpeed = speed;
        this.jumpPower = jp;
        this.direction = "right";
        this.internalPos = 0;
        this.internalPosSave = this.internalPos;
        this.moveOther = 0;
    }
//------------------------------------------------------------------------------
    // getters and setters for x and y velocity
    public void setVelX(int xVel){
        this.xVel = xVel;
    }
    public int getVelX() {
      return this.yVel;
    }
    public void setVelY(int yVel){
        this.yVel = yVel;
    }
    public int getVelY(){
      return this.yVel;
    }
    // getters and setters for the last faced direction
    public void setDirection(String direction) {
      this.direction = direction;
    }
    public String getDirection() {
      return this.direction;
    }
    // getters and setters for Current, New, and Difference Pos's
    public void setInternalPos(int internalPos) {
      this.internalPos = internalPos;
    }
    public void setInternalPosSave(int save) {
      this.internalPosSave = save;
    }
    public void setMoveOther(int moveOther) {
      this.moveOther = moveOther;
    }
    public int getInternalPos() {
      return this.internalPos;
    }
    public int getInternalPosSave() {
      return this.internalPosSave;
    }
    public int getMoveOther() {
      return this.moveOther;
    }
//------------------------------------------------------------------------------    
    public void draw(Graphics g){
        g.setColor(Color.red);
        g.fillRect(this.getX(), this.getY(), this.getW(), this.getH());
        g.setColor(Color.pink);
        if (this.getDirection().equals("left")) {
          g.fillRect(this.getX(), this.getY()+10, 20, 10);
        } else if (this.getDirection().equals("right")) {
          g.fillRect(this.getX()+40, this.getY()+10, 20, 10);
        }
    }
//--------------------
    public void moveLeft(Platform[] platforms){
      this.setDirection("left");
      if (this.getX() == Const.WIDTH/4) { // if on "centered part" or "middle part" of level
        this.setMoveOther(this.moveSpeed); // move bg + other objects right
        // System.out.println(this.getInternalPos() + "  " + this.getMoveOther() + "  " + (this.getInternalPos()-this.getMoveOther()));
        this.setInternalPos((this.getX() - platforms[0].getX()) - this.getMoveOther()); // changes player internal position
        // System.out.println(this.getInternalPos() + ", " + this.getX());
        if (this.getInternalPos() < Const.LEVEL1_LENGTH*0 + Const.WIDTH/4) { // if camera reached left end
          // get (internal pos) - (player on screen pos while in steady camera mode)
          this.setMoveOther(this.getInternalPos() - Const.WIDTH/4);
          // move player on screen by that much
          this.setX(this.getX() + this.getMoveOther());
          // move other objects right by (step) + (how far left the player just moved) 
          this.setMoveOther(this.getMoveOther() + this.moveSpeed);
        }
        
      } else if (this.getX() < Const.WIDTH/4) { // if on left edge of level
        this.setX(this.getX() - this.moveSpeed);
        this.setMoveOther(0);
        this.setInternalPos((this.getX() - platforms[0].getX()));
        // System.out.println(this.getInternalPos() + ", " + this.getX());
        if (this.getX() < 0) {
          this.setX(0);
        }
        
      } else if (this.getX() > Const.WIDTH/4) { // if on right edge of level
        this.setX(this.getX() - this.moveSpeed);
        this.setMoveOther(0);
        this.setInternalPos((this.getX() - platforms[0].getX()));
        // System.out.println(this.getInternalPos() + ", " + this.getX());
        // if moved to the left past right edge boundary, then corrects movement to what it should be
        if (this.getX() <= Const.WIDTH/4) {
          // System.out.println("move left thing");
          this.setMoveOther(Const.WIDTH/4 - this.getX());
          this.setX(Const.WIDTH/4);
        }
      }

      // if (this.getX() == Const.WIDTH/4) { // adjusts everything else according to how much they should scroll
        for (int p = 0; p < platforms.length; p++) {
          platforms[p].setX(platforms[p].getX() + this.getMoveOther());
        }
      // }

      // checks for collision
      for (int p = 0; p < platforms.length; p++) {
        if (platforms[p] != null) {
          // checks if player "entered" a platform && is inside the platform && player top is above bottom of platform && player bottom is below top of platform
          if (  (this.getX() < platforms[p].getX() + platforms[p].getW())  &&  
              (this.getX() + this.getW() > platforms[p].getX())  &&  
              (this.getY() < platforms[p].getY() + platforms[p].getH())  &&  
              (this.getY() + this.getH() > platforms[p].getY())  ) 
          {
              int temp = platforms[p].getX();
              platforms[p].setX(this.getX()-platforms[p].getW());
              temp = platforms[p].getX() - temp;
              for (int pp = 0; pp < platforms.length; pp++) {
                  if (pp != p) {
                      platforms[pp].setX(platforms[pp].getX() - temp);
                  }
              }
          }
        }
      }
    }
//--------------------
    public void moveRight(Platform[] platforms){
      this.setDirection("right");
      // System.out.println(this.getX() + "<-- getX(), constwidth/4 -->" + Const.WIDTH/4);
      if (this.getX() == Const.WIDTH/4) { // if on "centered part" or "middle part" of level
        this.setMoveOther(-this.moveSpeed); // move bg + other objects left
        // System.out.println(this.getInternalPos() + "  " + this.getMoveOther() + "  " + (this.getInternalPos()-this.getMoveOther()));
        this.setInternalPos((this.getX() - platforms[0].getX()) - this.getMoveOther()); // changes player internal position
        // System.out.println(this.getInternalPos() + ", " + this.getX());
        if (this.getInternalPos() > Const.LEVEL1_LENGTH - (3*Const.WIDTH/4)) { // if camera reached right end
          // get (internal pos) - (player on screen pos while in steady camera mode)
          this.setMoveOther(this.getInternalPos() - (Const.LEVEL1_LENGTH - 3*(Const.WIDTH/4)));
          // move player on screen by that much
          this.setX(this.getX() + this.getMoveOther());
          // move other objects left by (step) - (how far right the player just moved) 
          this.setMoveOther(-(this.moveSpeed - this.getMoveOther()));
        }
        // System.out.println(this.getX() + " test 1");
        
      } else if (this.getX() > Const.WIDTH/4) { // if on right edge of level
        this.setX(this.getX() + this.moveSpeed);
        this.setMoveOther(0);
        this.setInternalPos((this.getX() - platforms[0].getX()));
        // System.out.println(this.getInternalPos() + ", " + this.getX());
        if (this.getX() + this.getW() > Const.WIDTH) {
          this.setX(Const.WIDTH - this.getW());
        }
        // System.out.println(this.getX() + " test 2");
        
      } else if (this.getX() < Const.WIDTH/4) { // if on left edge of level
        this.setX(this.getX() + this.moveSpeed);
        this.setMoveOther(0);
        // System.out.println(this.getInternalPos() + ", " + this.getX() + " test before");
        this.setInternalPos((this.getX() - platforms[0].getX()));
        // System.out.println(this.getInternalPos() + ", " + this.getX() + " test after");
        // if moved to the right past left edge boundary, then corrects movement to what it should be
        if (this.getX() >= Const.WIDTH/4) {
          // System.out.println("move right thing");
          this.setMoveOther(Const.WIDTH/4 - this.getX());
          this.setX(Const.WIDTH/4);
        }
        // System.out.println(this.getX() + " test 3");
      }
      
      // if (this.getX() == Const.WIDTH/4) { // adjusts all other objects according to how much they should scroll
        for (int p = 0; p < platforms.length; p++) {
          platforms[p].setX(platforms[p].getX() + this.getMoveOther());
        }
      // }
        // System.out.println(this.getX() + " test 123.4");

      // checks for collision
      for (int p = 0; p < platforms.length; p++) {
        if (platforms[p] != null) {
          // checks if player "entered" a platform && is inside the platform && player top is above bottom of platform && player bottom is below top of platform
          if (  ((this.getX() + this.getW()) > platforms[p].getX())  &&  
              (this.getX() < (platforms[p].getX() + platforms[p].getW()))  &&  
              (this.getY() < (platforms[p].getY() + platforms[p].getH()))  &&  
              ((this.getY() + this.getH()) > platforms[p].getY())  ) 
          {
//            // moves all other (non-player) objects so that the objects can visually be where they're supposed to be when collision happens in the middle of a step
//            System.out.println("platform collision: " + (platforms[p].getX() - platforms[0].getX()) + " " + this.getInternalPos()); // 903 - (197+60 - -703) = 903 - 960 = -57 or 200 - (197+60) = -57
//            // thisintpos - (platx - plat0x) or thisx - platx
//            this.setMoveOther(this.getInternalPos() - (platforms[p].getX() - platforms[0].getX())); // compares player internal pos to platform internal pos
//            for (int pp = 0; pp < platforms.length; pp++) {
//              platforms[pp].setX(platforms[pp].getX() - this.getMoveOther());
//            }
//            System.out.println("platform collision: " + (platforms[p].getX()));
              int temp = platforms[p].getX();
              platforms[p].setX(this.getX()+this.getW());
              temp = platforms[p].getX() - temp;
              for (int pp = 0; pp < platforms.length; pp++) {
                  if (pp != p) {
                      platforms[pp].setX(platforms[pp].getX() + temp);
                  }
              }
          }
        }
      }
      // System.out.println(this.getX() + " test 4 " + this.getInternalPos());
    }
//--------------------
    public void applyGravity(){
        this.yVel += Const.GRAVITY;
    }
//--------------------
    public void moveY(Platform[] platforms){
      this.setY(this.getY() + this.yVel);
      for (int p = 0; p < platforms.length; p++) {
        // checks if player "entered" a platform && is inside the platform && player left is left of platform right && player right is right of platform left
        if (   (this.getY() + this.getH() >= platforms[p].getY())  &&  
            (this.getY() < platforms[p].getY() + platforms[p].getH())  &&  
            (this.getX() < platforms[p].getX() + platforms[p].getW())  &&  
            (this.getX() + this.getW() > platforms[p].getX())   ) 
        {
          if (this.yVel >= 0) {
            this.setY(platforms[p].getY() - this.getH());
            this.yVel = 0;
          } else {
            this.setY(platforms[p].getY() + platforms[p].getH());
            this.yVel = 0;
          }
        }
      }
    }
//--------------------
    public boolean isOnPlatform(Platform platform){
      if ((this.getX() < platform.getX() + platform.getW())  &&  (this.getX() + this.getW() > platform.getX())) {
        return (this.getY() + this.getH() == platform.getY());
      }
      return false;
    }
//--------------------
  public void jump() {
    this.setVelY(Const.JUMP_SPEED);
  }
}

// constant values
// @author Galton, Daniel
// @version Dec 21 2022

public final class Const{
    public static final int WIDTH = 800; // window width
    public static final int WIDTHOFFSET = 18; // to offset jframe's poor pixel calculations
    public static final int HEIGHT = 600; // window height
    public static final int HEIGHTOFFSET = 47; // to offset jframe's poor pixel calculations
    public static final int GROUND = HEIGHT-40; // how high up the ground is from the bottom of the window
    public static final int GRAVITY = 3; // acceleration of gravity
    public static final int FRAME_PERIOD = 20; // milliseconds between frames
    public static final int JUMP_SPEED = -36; // player jump speed
    public static final int MOVE_SPEED = 8; // player move speed
    public static final int STARTX = 30; // starting player X pos
    public static final int STARTY = GROUND - 130; // starting player Y pos
    public static final int CHARW = 60;
    public static final int CHARH = 60;
    public static final int BULLET_HEIGHT = 6;
    public static final int BULLET_WIDTH = 10;
    public static final int BULLET_SPEED = 12;    
    public static final int LEVEL1_LENGTH = 1200;
    
    private Const(){
    }
}

// abstract class for all game objects that are interactable by the user 
// GameObject encapsulates Character, Bullet, Platform

import java.awt.Graphics;

abstract class GameObject{
    private int x;
    private int y;
    private int w;
    private int h;
//------------------------------------------------------------------------------  
    GameObject(){
        this.x = 0;
        this.y = 0;
        this.w = 0;
        this.h = 0;
    }
    GameObject(int x, int y, int width, int height){
        this.x = x;
        this.y = y;
        this.w = width;
        this.h = height;
    }
//------------------------------------------------------------------------------
    // getters and setters
    public int getX(){
        return this.x;
    }
    public int getY(){
        return this.y;
    }
    public int getW(){
        return this.w;
    }    
    public int getH(){
        return this.h;
    }    
    public void setX(int x){
        this.x = x;
    }
    public void setY(int y){
        this.y = y;
    }
    public void setW(int w){
        this.w = w;
    }
    public void setH(int h){
        this.h = h;
    }
//------------------------------------------------------------------------------    
    // mandatory draw method so that we don't forget to draw the game object
    abstract void draw(Graphics g);
}

// main java file that runs jpanel and jframe
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GravityAndJumping {
  JFrame gameWindow;
  GamePanel gamePanel;   
  MyKeyListener keyListener; 
  
  boolean leftHeld, rightHeld, downHeld, upHeld, spaceHeld, escpressed;
    
  // game variables
  int level = 1;
  int playerCurrentX = 0;
  int playerNewX = 0;
  int playerXdifference = playerNewX - playerCurrentX;
  // game objects
  Character player = new Character(Const.STARTX, Const.STARTY, Const.CHARW, Const.CHARH, Const.MOVE_SPEED, Const.JUMP_SPEED);
  Ammo ammo = new Ammo();
  // make platforms for levels
  Platform[] platforms1 = {
    new Platform(0,Const.GROUND,Const.LEVEL1_LENGTH,40,Color.GREEN),
    new Platform(200, 400, 100, 50, Color.BLUE),
    new Platform(400, 200, 100, 50, Color.BLUE),
    new Platform(150, 100, 100, 50, Color.BLUE),
    new Platform(175, 310, 60, 20, Color.BLUE),
    new Platform(600, 380, 540, 30, Color.BLUE),
    new Platform(630, 230, 50, 50, Color.RED),
    new Platform(750, 230, 50, 50, Color.ORANGE),
    new Platform(870, 230, 50, 50, Color.YELLOW),
    new Platform(990, 230, 80, 50, Color.GREEN)
  };
  
//------------------------------------------------------------------------------
  GravityAndJumping(){
    gameWindow = new JFrame("Game Window");
    gameWindow.setSize(Const.WIDTH,Const.HEIGHT);
    gameWindow.setMinimumSize(new Dimension(Const.WIDTH
                                              +Const.WIDTHOFFSET
                                              , Const.HEIGHT
                                              +Const.HEIGHTOFFSET
                                           ));
    gameWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    gameWindow.setResizable(false);
    
    gamePanel = new GamePanel();
    gameWindow.add(gamePanel); 
    
    keyListener = new MyKeyListener();
    gamePanel.addKeyListener(keyListener);
    
    gameWindow.setVisible(true);    
  }
//------------------------------------------------------------------------------  
  //main game loop
  public void run(){
    while (true) {
      gameWindow.repaint();
      try {Thread.sleep(Const.FRAME_PERIOD);} catch(Exception e){}

      // so the player moves, we have to check if they're close enough to the left edge or right edge, if they are, move character X instead of all other X's
      // if not close enough to an edge, move all other X's according to how much player would 
      if (level == 1) {
        
        if (leftHeld){player.moveLeft(platforms1);}
        if (rightHeld){player.moveRight(platforms1);}
        if (spaceHeld) {
          ammo.addBullet(player);
        }
        ammo.moveBullets();
  
      }

      // if (player.getX() > Const.WIDTH/2 && player.getX() < 1200 - Const.WIDTH/2) {
      //   for (int p = 0; p < platforms.length; p++) {
      //     platforms[p].setX(platforms[p].getX() + playerXdifference);
      //   }
      // }
      
      player.applyGravity();
      player.moveY(platforms1);
      if (upHeld) {
        for (int p = 0; p < platforms1.length; p++) {
          if (player.isOnPlatform(platforms1[p])) {
            player.jump();
          }
        }
      }
    }
  }
//------------------------------------------------------------------------------  
    //act upon key events
    public class MyKeyListener implements KeyListener{
        public void keyPressed(KeyEvent e){
            int key = e.getKeyCode();
            if (key == KeyEvent.VK_A){
                leftHeld = true;
            }
            if (key == KeyEvent.VK_D){
                rightHeld = true;
            } 
            if (key == KeyEvent.VK_W){
                upHeld = true;
            }
            if (key == KeyEvent.VK_SPACE){
               spaceHeld = true;
            } 
            if (key == KeyEvent.VK_ESCAPE){
                System.exit(0);
            }
        }
        public void keyReleased(KeyEvent e){ 
          int key = e.getKeyCode();
            if (key == KeyEvent.VK_A){
                leftHeld = false;
            } 
            if (key == KeyEvent.VK_D){
                rightHeld = false;
            } 
            if (key == KeyEvent.VK_W){
                upHeld = false;
            }
            if (key == KeyEvent.VK_SPACE){
                spaceHeld = false;
            } 
        }   
        public void keyTyped(KeyEvent e){
        }           
    }    
//------------------------------------------------------------------------------
    //draw everything
    public class GamePanel extends JPanel{
        GamePanel(){
            setFocusable(true);
            requestFocusInWindow();
        }
        
        @Override
        public void paintComponent(Graphics g){ 
          super.paintComponent(g); //required
          player.draw(g);
          for (int p = 0; p < platforms1.length; p++) {
            platforms1[p].draw(g);
          }
          ammo.drawBullets(g);
          g.setColor(Color.GRAY);
          g.drawLine(platforms1[0].getX(),0,platforms1[0].getX(),Const.HEIGHT);
        }    
    }    
//------------------------------------------------------------------------------
    public static void main(String[] args){
        GravityAndJumping demo = new GravityAndJumping();
        demo.run();
    }
}

// platforms
// inherits GameObject
import java.awt.Color;
import java.awt.Graphics;

public class Platform extends GameObject {
  private Color colour;
  
  // constructors
  Platform(){
    super();
    this.colour = new Color(0,0,0,0); //r,g,b,transparency
  }
  Platform(int x, int y, int w, int h, Color c) {
    super(x,y,w,h);
    this.colour = c;
  }

  // setters
  public void setC(Color newC) {
    this.colour = newC;
  }
  // getters
  public Color getC() {
    return this.colour;
  }

  public void draw(Graphics g){
    g.setColor(this.colour);
    g.fillRect(this.getX(), this.getY(), this.getW(), this.getH());
  }
}
